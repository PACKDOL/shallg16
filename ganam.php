<?php

define('PHP_VERSION_CS', PHP_VERSION_ID);
define('VALID_JSON_VERSION', 50304);

$UNSHELL_MESSAGES = array();

define('UNSHELL_OK', 0);
$UNSHELL_MESSAGES[UNSHELL_OK] = '';


define('UNSHELL_GENERIC_ERROR', -10);
$UNSHELL_MESSAGES[UNSHELL_GENERIC_ERROR] = 'Generic error';


define('UNSHELL_ERROR', -20);
$UNSHELL_MESSAGES[UNSHELL_ERROR] = 'Error';

define('UNSHELL_NO_DIR_FALLBACK', 5);
$UNSHELL_MESSAGES[UNSHELL_NO_DIR_FALLBACK] = 'No such directory falling back to default directory.';

define('UNSHELL_CANT_CHDIR', 1010);
$UNSHELL_MESSAGES[UNSHELL_CANT_CHDIR] = 'Can\'t change directory.';


define('UNSHELL_PATH_ACCESS_FORBIDDEN', 10);
$UNSHELL_MESSAGES[UNSHELL_PATH_ACCESS_FORBIDDEN] = 'Foridden access to path. Try to change mode or owner!';

define('UNSHELL_PATH_WRITE_ACCESS_FORBIDDEN', 15);
$UNSHELL_MESSAGES[UNSHELL_PATH_WRITE_ACCESS_FORBIDDEN] = 'Path is not writeable. Try to change mode or owner!';


define('UNSHELL_NOT_FILE', 20);
$UNSHELL_MESSAGES[UNSHELL_NOT_FILE] = 'Path is not file. Operation allowed only to file.';


define('UNSHELL_PATH_IS_ME', 25);
$UNSHELL_MESSAGES[UNSHELL_PATH_IS_ME] = 'Path points to ~Unshell~ file. No manipulation allowed.';

define('UNSHELL_DIR_ACCESS_FORBIDDEN', 30);
$UNSHELL_MESSAGES[UNSHELL_DIR_ACCESS_FORBIDDEN] = 'Access to directory is forbidden.';

define('UNSHELL_FILE_TOO_BIG', 35);
$UNSHELL_MESSAGES[UNSHELL_FILE_TOO_BIG] = 'File is too big.';


define('UNSHELL_NOT_DIR', 40);
$UNSHELL_MESSAGES[UNSHELL_NOT_DIR] = 'Path is not directory. Operation allowed only to directory.';


define('UNSHELL_OUT_OF_ALLOWED_DIR', 50);
$UNSHELL_MESSAGES[UNSHELL_OUT_OF_ALLOWED_DIR] = 'Path is out of allowed directory. Path has to be a child of ~Unshell~ directory.';


define('UNSHELL_PATH_IS_NOT_EXISTS', 60);
$UNSHELL_MESSAGES[UNSHELL_PATH_IS_NOT_EXISTS] = 'Path is pointing to nowhere.';

define('UNSHELL_PATH_IS_EXISTS', 65);
$UNSHELL_MESSAGES[UNSHELL_PATH_IS_EXISTS] = 'Path is already exists.';



define('UNSHELL_CANT_DELETE', 70);
$UNSHELL_MESSAGES[UNSHELL_CANT_DELETE] = 'Can\'t deflete file. Try to change permissions and the owner.';

define('UNSHELL_CANT_CHMOD', 80);
$UNSHELL_MESSAGES[UNSHELL_CANT_CHMOD] = 'Can\'t change permissions of file. Try to change the owner.';

define('UNSHELL_CANT_CHOWN', 90);
$UNSHELL_MESSAGES[UNSHELL_CANT_CHOWN] = 'Can\'t change the owner. Isn\'t is sad? (T_T)';

define('UNSHELL_WRONG_MODE', 100);
$UNSHELL_MESSAGES[UNSHELL_WRONG_MODE] = 'Wrong chmod mode. Mode has to have following format: 0XXX where X is in range 0-7.';

define('UNSHELL_CANT_SAVE', 110);
$UNSHELL_MESSAGES[UNSHELL_CANT_SAVE] = 'Can\'t change content of file.';

define('UNSHELL_CANT_UPLOAD', 120);
$UNSHELL_MESSAGES[UNSHELL_CANT_UPLOAD] = 'Can\'t upload file.';

define('UNSHELL_CANT_RENAME', 130);
$UNSHELL_MESSAGES[UNSHELL_CANT_RENAME] = 'Can\'t rename/move.';

define('UNSHELL_CANT_COPY', 140);
$UNSHELL_MESSAGES[UNSHELL_CANT_COPY] = 'Can\'t copy.';

define('UNSHELL_CANT_MKDIR', 150);
$UNSHELL_MESSAGES[UNSHELL_CANT_MKDIR] = 'Can\'t make directory.';

define('UNSHELL_CANT_MKFILE', 160);
$UNSHELL_MESSAGES[UNSHELL_CANT_MKFILE] = 'Can\'t make file.';

class unShell
{
    private $_messages = array();

    private $_status_code = UNSHELL_OK;

    
    private $extensions = array('php', 'asp', 'pl', 'sql');

    
    private $dateformat = "H:i:s d/m/Y";

    
    private $directory = '.';
    private $full_directory = '';

    
    private $show_full_path = false;

    
    private $scan_subdirs = true;

    
    private $scan_hidden = true;

    private $show_only_ext = true;

    
    private $task = '';

    
    private $filelimit = 30000;

    
    private $filesize = 10000000;

    
    private $owner = '';
    private $ownerid = -1;

    
    private $counter = 0;
    private $suspcounter = 0;

    
    private $files = array();


    
    private $title = 'UnShell';

    
    private $version = '0.1';

    
    private $_regex = '`Filesman|fopen(\s*)\(|chmod(\s*)\(|exec(\s*)\(|system(\s*)\(|eval(\s*)\(|Load\(Request\.BinaryRead\(int\.Parse\(Request\.Cookies|Html \= Replace\(Html\, \"\%26raquo\;\"\, \"?\"\)|pinkok|internal class reDuh|c0derz shell|md5 cracker|umer rock|Function CP\(S\,D\)\{sf\=CreateObject\(\"java\"\,\"java\.io\.File|Arguments\=xcmd\.text|asp cmd shell|Maceo|TEXTAREA id\=TEXTAREA1 name\=SqlQuery|CMD Bilgileri|sbusqlmod|php assert\(\$\_POST\[|oWshShellNet\.UserName|PHP C0nsole|rhtools|WinX Shell|system\(\$\_GET\[\'cmd\'|Successfully uploadet|\'Are you sure delete|sbusqlcmd|CFSWITCH EXPRESSION\=\#Form\.chopper|php\\\\HFile|\"ws\"\+\"cr\"\+\"ipt\.s\"\+\"hell\"|eval\(request\(|string rootkey|uZE Shell|Copyed success\!|InStr\(\"\$rar\$mdb\$zip\$exe\$com\$ico\$\"|Folder dosen\'t exists|Buradan Dosya Upload|echo passthru\(\$\_GET\[\'cmd\'|javascript:Bin\_PostBack|The file you want Downloadable|arguments\=\"/c \#cmd\#\"|cmdshell|AvFBP8k9CDlSP79lDl|AK-74 Security Team Web Shell|cfexecute name \= \"\#Form\.cmd\#\"|execute any shell commandn|Gamma Web Shell|System\.Reflection\.Assembly\.Load\(Request\.BinaryRead\(int\.Parse\(Request\.Cookies|fcreateshell|bash to execute a stack overflow|Safe Mode Shell|ASPX Shell|dingen\.php|azrailphp|\$\_POST\[\'sa\']\(\$\_POST\[\'sb\']\)|AspSpy|ntdaddy|\.HitU\. team|National Cracker Crew|eval\(base64\_decode\(\$\_REQUEST\[\'comment\'|Rootshell|geshi\\\\tsql\.php|tuifei\.asp|GRP WebShell|No Permission :\(|powered by zehir|will be delete all|WebFileManager Browsing|Dive Shell|diez\=server\.urlencode|@eval\(\$\_POST\[\'|ifupload\=\"ItsOk\"|eval\(request\.item|\(eval request\(|wsshn\.username|connect to reDuh|eval\(gzinflate\(base64\_decode|Ru24PostWebShell|ASPXTOOL\"|aspshell|File upload successfully you can download here|eval request\(|if\(is\_uploaded\_file\(\$HTTP|Sub RunSQLCMD|STNC WebShell|doosib|WinExec\(Target\_copy\_of\_cmd|php passthru\(getenv|win\.com cmd\.exe /c cacls\.exe|TUM HAKLARI SAKLIDIR|Created by PowerDream|Then Request\.Files\(0\)\.SaveAs\(Server\.MapPath\(Request|cfmshell|\{ Request\.Files\[0]\.SaveAs\(Server\.MapPath\(Request|\%execute\(request\(\"|php eval\(\$\_POST\[|lama\'s\'hell|RHTOOLS|data\=request\(\"dama\"|digitalapocalypse|hackingway\.tk|\.htaccess stealth web shell|strDat\.IndexOf\(\"EXEC \"|ExecuteGlobal request\(|Deleted file have finished|bin\_filern|CurrentVersionRunBackdoor|Chr\(124\)\.O\.Chr\(124\)|does not have permission to execute CMD\.EXE|G-Security Webshell|system\( \"\./findsock|configwizard|textarea style\=\"width:600\;height:200\" name\=\"cmd\"|ASPShell|repair/sam|BypasS Command eXecute|\%execute\(request\(|arguments\=\"/c \#hotmail|Coded by Loader|Call oS\.Run\(\"win\.com cmd\.exe|\'co\'\.\'py\'|DESERTSUN SERVER CRASHER|mbdfiles|ASPXSpy|cfparam name\=\"form\.shellpath\"|IIS Spy Using ADSI|p4ssw0rD|WARNING: Failed to daemonise|C0mmand line|phpinfo\(\) function has non-permissible|letaksekarang|Execute Shell Command|DXGLOBALSHIT|IISSpy|execute request\(|Chmod Ok\!|Upload Gagal|awen asp\.net|execute\(request\(\"|oSNet\.ComputerName"|base64_decode(.*)\(`i';

    
    private $_self = '';
    
    private $_self_directory = '';
    
    private $directory_writeable = false;

    private $directory_perms = '';

    
    function __construct($messages)
    {
        $this->_messages = $messages;

        

        if (isset($_GET['scan_subs'])) {
            $this->scan_subdirs = ($_GET['scan_subs'] === 'yes') ? true : false;
        }

        if (isset($_GET['only_ext'])) {
            $this->show_only_ext = ($_GET['only_ext'] === 'yes') ? true : false;
        }

        if (isset($_GET['dir'])) {
            $this->_self_directory = realpath($_GET['dir']);

            if ($this->_self_directory === false) {
                $this->_self_directory = __DIR__;
                $this->_status_code = UNSHELL_NO_DIR_FALLBACK;
            }
        } else {
            $this->_self_directory = __DIR__;
        }

        $this->directory_writeable = is_writable($this->_self_directory);

        $this->directory_perms = substr(sprintf('%o', fileperms($this->_self_directory)), -4);

        $this->setDir($this->_self_directory);

        $this->ownerid = getmyuid();
        $this->owner = $this->ownerid;

        if (function_exists('posix_getpwuid')) {
            $owner_info = @posix_getpwuid($this->ownerid);
            if ($owner_info) {
                $this->owner = $owner_info['name'];
            }
        }










        if (isset($_GET['task'])) {
            $this->task = $_GET['task'];
        }
    }

    
    public function setDir($dir)
    {
        $this->directory = $dir;
        $this->full_directory = realpath($this->directory);
    }

    
    public function start()
    {
        switch ($this->task) {
            case 'main_info':
                {
                    $data = array('owner_id' => $this->ownerid, 'owner' => $this->owner, 'title' => $this->title, 'version' => $this->version, 'writable' => $this->directory_writeable, 'perms' => $this->directory_perms, 'directory' => $this->_self_directory, 'extensions' => $this->extensions, 'SERVER_SIGNATURE' => $_SERVER['SERVER_SIGNATURE'], 'SERVER_SOFTWARE' => $_SERVER['SERVER_SOFTWARE'], 'REMOTE_ADDR' => $_SERVER['REMOTE_ADDR']);

                    $this->finish(null, $data);
                }
                break;
            
            case 'magic':
                {
                    echo file_get_contents(__FILE__);exit();
                }
            case 'file-delete':
                {
                    $file_path = $_GET['file'];

                    $this->finish($this->removeFile($file_path));
                }
            case 'mfiles-delete':
            {
                $data = json_decode(file_get_contents("php://input"), true);

                if (!isset($data['mfiles']) || (count($data['mfiles']) == 0)) {
                    $this->finish(UNSHELL_ERROR, null,'no file list provided');
                }

                $files_count = count($data['mfiles']);

                $files_processed = 0;

                foreach ($data['mfiles'] as $file_path) {
                    $res = $this->removeFile($file_path);

                    if ($res !== UNSHELL_OK){
                        $this->finish($res, null, 'during processing ' . $file_path . ' ' . $files_processed . '/' . $files_count);
                    }
                    
                    $files_processed++;
                }

                $this->finish(UNSHELL_OK);
            }
            case 'file-chmod':
                {
                    $file_path = $_GET['file'];

                    $mode = $_GET['mode'];

                    if (preg_match('/^[0-7]{4}$/m', $mode)) {
                        $result = chmod($file_path, octdec($mode));

                        if ($result === false) {
                            $this->finish(UNSHELL_CANT_CHMOD);
                        } else {
                            $this->finish(0);
                        }
                    } else {
                        $this->finish(UNSHELL_WRONG_MODE);
                    }
                }
            case 'file-chown':
                {
                    $file_path = $_GET['file'];
                    $result = chown($file_path, $this->ownerid);

                    if ($result === false) {
                        $this->finish(UNSHELL_CANT_CHOWN);
                    } else {
                        $this->finish(0);
                    }
                }
            case 'file-save':
                {
                    $file_path = $_GET['file'];

                    if (($res = $this->canManipulateFile($file_path)) !== UNSHELL_OK) {
                        $this->finish($res);
                    }

                    $data = json_decode(file_get_contents("php://input"), true);

                    $content = $data['content'];

                    $result = file_put_contents($file_path, $content);

                    if ($result === false) {
                        $this->finish(UNSHELL_CANT_SAVE);
                    } else {
                        $this->finish(0);
                    }
                }
            case 'file-content-raw':
                {
                    if (!isset($_GET['file'])) {
                        die('no file specified');
                    }

                    $file_path = $_GET['file'];

                    if (($res = $this->canReadFile($file_path)) !== UNSHELL_OK) {
                        $this->finish($res);
                    }

                    $file = $this->fileInfo($file_path);

                    $analize_data = $this->analyze($file['full_path'], false);


                    $file['content'] = base64_encode(file_get_contents($file['full_path']));

                    $file['message'] = $analize_data['message'];
                    $file['type'] = $analize_data['type'];

                    $file['funcs'] = $analize_data['funcs'];

                    $this->finish(UNSHELL_OK, $file);
                }
                break;
            case 'file-download':
                {
                    if (!isset($_GET['file'])) {
                        die('no file specified');
                    }

                    $file_path = $_GET['file'];

                    if (($res = $this->canReadFile($file_path)) !== UNSHELL_OK) {
                        $this->finish($res);
                    }

                    $file = $this->fileInfo($file_path);

                    if (function_exists('mime_content_type')) {
                        $mime_type = mime_content_type($file_path);
                    } else {
                        $mime_type = 'application/octet-stream';
                    }


                    header('Content-type: ' . $mime_type);
                    header('Content-Disposition: attachment; filename="' . basename(($file_path)) . '"');

                    readfile($file_path);
                    exit();
                }
            case 'files':
                {
                    $this->filescan();

                    $this->checkFiles();

                    $this->files = array_merge($this->files, $this->getDirs());

                    $this->finish($this->_status_code, array('working_directory' => $this->_self_directory, 'files' => $this->files));
                }
                break;
            case 'deleteme':
                {
                    unlink(__FILE__);
                    echo "Bye bye!";
                    exit();
                }
            case 'cmd':
                {
                    if (!chdir($this->directory)) {
                        $this->finish(UNSHELL_CANT_CHDIR);
                    }

                    $res = array();

                    try {
                        exec($_GET['cmd'] . ';pwd', $res);
                    } catch (Exception $e) {
                        $this->finish(UNSHELL_GENERIC_ERROR, array('error_message' => $e->getMessage()));
                    }

                    $nwd = $res[count($res) - 1];
                    unset($res[count($res) - 1]);
                    $this->finish(UNSHELL_OK, array('output' => $res, 'working_directory' => $nwd));
                }
            case 'mkdir':
                {
                    if (mkdir($this->_self_directory . '/' . $_GET['mkdir_name'])) {
                        $this->finish(UNSHELL_OK);
                    } else {
                        $this->finish(UNSHELL_CANT_MKDIR);
                    }
                }
            case 'rename':
                {
                    $tmp_from = $_GET['rename_from'];
                    $tmp_to = $_GET['rename_to'];
                    if (file_exists($tmp_to)) {
                        $this->finish(UNSHELL_PATH_IS_EXISTS);
                    }
                    if (rename($tmp_from, $tmp_to)) {
                        $this->finish(UNSHELL_OK);
                    } else {
                        $this->finish(UNSHELL_CANT_RENAME);}
                }
            case 'mkfile':
                {
                    $tmp_name = $_GET['mkfile_name'];
                    if (file_exists($this->_self_directory . '/' . $tmp_name)) {
                        $this->finish(UNSHELL_PATH_IS_EXISTS);
                    }
                    if (file_put_contents($this->_self_directory . '/' . $tmp_name, '') !== false) {
                        $this->finish(UNSHELL_OK);
                    } else {
                        $this->finish(UNSHELL_CANT_MKFILE);
                    }
                }
            case 'upload_by_url':
                {
                    $tmp_file_name = $_GET['file_name'];
                    $tmp_url = $_GET['url'];
                    $tmp_overwrite = isset($_GET['overwrite']);

                    $this->finish($this->loadFileFromWeb($tmp_url, $this->_self_directory . '/' . $tmp_file_name, $tmp_overwrite));
                }
            case 'upload_files':
                {
                    foreach ($_FILES["files"]["error"] as $key => $error) {
                        if ($error == UPLOAD_ERR_OK) {
                            $tmp_name = $_FILES["files"]["tmp_name"][$key];
                            $name = basename($_FILES["files"]["name"][$key]);
                            if (!move_uploaded_file($tmp_name, $this->_self_directory . '/' . $name)) {
                                $this->finish(UNSHELL_CANT_UPLOAD, array('file_error_message' => $error, 'file' => basename($_FILES["files"]["name"][$key])));
                            }
                        } else {
                            $this->finish(UNSHELL_CANT_UPLOAD, array('file_error_message' => $error, 'file' => basename($_FILES["files"]["name"][$key])));
                        }
                    }
                    $this->finish(UNSHELL_OK);
                }
            default:
                {
                    $str = '';
                    echo base64_decode($str);
                }
        }
    }

    
    public function finish($res_code = null, $additional = null, $additional_message = '')
    {
        if ($res_code !== null)
            $this->_status_code = $res_code;

        $msg = '';

        if ($this->_status_code !== UNSHELL_OK ) {
            $msg = $this->_messages[$this->_status_code] . ' ' . $additional_message;
        }

        $data = array(
            'result_code' => $this->_status_code,
            'result_message' => $msg,
            'working_directory' => $this->_self_directory,
            'directory_separator' => DIRECTORY_SEPARATOR,
            'root_directory' => $_SERVER['DOCUMENT_ROOT'],
            'server_name' => $_SERVER['SERVER_NAME'],
            'server_port' => $_SERVER['SERVER_PORT'],
            'request_uri' => $_SERVER['REQUEST_URI'],
            'https' => isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] !== 'off') ? 'yes' : 'no'
        );

        if ($additional !== null) {
            $data = array_merge($data, $additional);
        }

        echo $this->json_encode_cs($data);

        exit($this->_status_code);
    }

    
    public function json_encode_cs($data)
    {

        if (version_compare(phpversion(), '5.4', '<')) {
            $ret = $this->raw_json_encode($data);
        } else {
            if (PHP_VERSION_CS >= VALID_JSON_VERSION) {
                $ret = json_encode($data, 64 | 256);
            } else {
                $ret = json_encode($data);
            }

            
            if (!$ret) {
                $ret = $this->_json_encode($data);
            }
        }

        return $ret;
    }

    function raw_json_encode($input, $flags = 0)
    {
        $fails = implode('|', array_filter(array(
            '\\\\',
            $flags & JSON_HEX_TAG ? 'u003[CE]' : '',
            $flags & JSON_HEX_AMP ? 'u0026' : '',
            $flags & JSON_HEX_APOS ? 'u0027' : '',
            $flags & JSON_HEX_QUOT ? 'u0022' : '',
        )));
        $pattern = "/\\\\(?:(?:$fails)(*SKIP)(*FAIL)|u([0-9a-fA-F]{4}))/";
        $callback = function ($m) {
            return html_entity_decode("&#x$m[1];", ENT_QUOTES, 'UTF-8');
        };
        return preg_replace_callback($pattern, $callback, json_encode($input, $flags));
    }


    
    function _json_encode($val)
    {
        if (is_string($val)) return '"' . addslashes($val) . '"';
        if (is_numeric($val)) return $val;
        if ($val === null) return 'null';
        if ($val === true) return 'true';
        if ($val === false) return 'false';

        $assoc = false;
        $i = 0;
        foreach ($val as $k => $v) {
            if ($k !== $i++) {
                $assoc = true;
                break;
            }
        }
        $res = array();
        foreach ($val as $k => $v) {
            $v = $this->_json_encode($v);
            if ($assoc) {
                $k = '"' . addslashes($k) . '"';
                $v = $k . ':' . $v;
            }
            $res[] = $v;
        }
        $res = implode(',', $res);
        return ($assoc) ? '{' . $res . '}' : '[' . $res . ']';
    }

    
    private function removeFile($file_path)
    {
        if (($res = $this->canManipulateFile($file_path)) !== UNSHELL_OK) {
            return $res;
        }

        if (is_dir($file_path)) {
            if ($this->deleteDirectory($file_path)) {
                return UNSHELL_OK;
            } else {
                return UNSHELL_OK;
            }
        }

        if (unlink($file_path)) {
            return UNSHELL_OK;
        } else {
            return UNSHELL_CANT_DELETE;
        }
    }

    public function canManipulateFile($file)
    {
        if (($res = $this->canReadFile($file)) !== UNSHELL_OK) {
            return $res;
        }

        if (!is_writeable($file)) {
            return UNSHELL_PATH_WRITE_ACCESS_FORBIDDEN;
        }

        return UNSHELL_OK;
    }

    
    public function canReadFile($file)
    {
        if (!is_readable($file)) {
            
            return UNSHELL_PATH_ACCESS_FORBIDDEN;
        }

        if (!file_exists($file)) {
            return UNSHELL_PATH_IS_NOT_EXISTS;
        }

        if (realpath($file) === realpath(rtrim($this->_self_directory, '/') . '/' . $this->_self)) {
            return UNSHELL_PATH_IS_ME;
        }

        return UNSHELL_OK;
    }

    private function deleteDirectory($dir)
    {
        $files = array_diff(scandir($dir), array('.', '..'));

        foreach ($files as $file) {
            (is_dir("$dir/$file")) ? $this->deleteDirectory("$dir/$file") : unlink("$dir/$file");
        }

        return rmdir($dir);
    }

    
    private function fileInfo($file)
    {

        $info = array();

        $file_info = pathinfo($file);
        $info['dir_name'] = $file_info['dirname'];
        $info['base_name'] = $file_info['basename'];

        $info['writeable'] = is_writable($file);

        $info['ext'] = isset($file_info['extension']) ? $file_info['extension'] : '';

        $info['owner_id'] = fileowner($file);

        $info['fingerprint'] = false;

        $info['owner'] = $info['owner_id'];

        $info['permissions'] = substr(sprintf('%o', fileperms($file)), -4);

        if (function_exists('posix_getpwuid')) {
            $owner_data = @posix_getpwuid($info['owner_id']);
            if ($owner_data) {
                $info['owner'] = $owner_data['name'];
            }
        }

        

        if (!$this->show_full_path) {
            $info['full_path'] = $file_info['dirname'] . '/' . $file_info['basename'];
        } else {
            $info['full_path'] = $this->full_directory . '/' . $file_info['basename'];
        }

        $info['last_accessed'] = date($this->dateformat, fileatime($file));
        $info['last_modified'] = date($this->dateformat, filemtime($file));

        $info['size'] = filesize($file);

        $mime_type = 'n/a';
        if (function_exists('mime_content_type')) {
            $mime_type = mime_content_type($file);
        }

        $info['mime_type'] = $mime_type;

        $info['hash'] = md5($info['size'] . $info['writeable'] . $info['full_path'] . $info['owner'] . $info['owner_id'] . $info['permissions']);

        return $info;
    }

    
    private function analyze($file, $fast = true)
    {
        $type = 'ok';
        $susp_funcs = array();

        $this->counter++;

        
        $content = file_get_contents($file);

        $content_ready = $content;

        if (preg_match($this->_regex, $content, $matches, PREG_OFFSET_CAPTURE, 0)) {
            $type = 'suspicious';
            $shellflag = "Uses suspicious functions";
            if (!$fast) {
                $_content = explode("\n", $content);
                $content_ready = '';
                for ($line = 0; $line < count($_content); $line++) {
                    if (preg_match_all($this->_regex, $_content[$line], $matches, PREG_SET_ORDER, 0)) {
                        foreach ($matches as $match) {
                            if (!isset($susp_funcs[$match[0]])) {
                                $susp_funcs[$match[0]] = array();
                            }
                            $susp_funcs[$match[0]]['func'] = $match['0'];

                            if (!isset($susp_funcs[$match[0]]['lines'])) {
                                $susp_funcs[$match[0]]['lines'] = array();
                            }
                            $susp_funcs[$match[0]]['lines'][$line] = ($line + 1);
                        }
                        $content_ready .= ' ' . $_content[$line] . "\n";
                        
                    } else {
                        $content_ready .= $_content[$line] . "\n";
                    }
                }
            }

            $this->suspcounter++;
        } else {
            $shellflag = '';
        }

        foreach ($susp_funcs as $k => $func) {
            $susp_funcs[$k]['lines'] = array_values($func['lines']);
        }

        $susp_funcs = array_values($susp_funcs);

        return array('message' => $shellflag, 'type' => $type, 'funcs' => $susp_funcs, 'content' => htmlentities(trim($content_ready), ENT_IGNORE));
    }

    private function fileContent($file, &$data)
    {
        if (!file_exists($file)) {
            return UNSHELL_NOT_FILE;
        }

        if (filesize($file) > $this->filesize) {
            return 20;
        }

        $data = file_get_contents($file);

        $data = htmlentities($data);

        if ($data === false) {
            return 30;
        }

        return 0;
    }

    
    private function filescan()
    {
        $this->scandir($this->directory);
        if ($this->filelimit > 0) {
            if (count($this->files) > $this->filelimit) {
                return false;
            }
        }

        return true;
    }

    
    private function scandir($dir)
    {
        if (!is_dir($dir) || !is_readable($dir)) {
            return true;
        }

        $handle = opendir($dir);

        if ($this->filelimit > 0) {
            if (count($this->files) > $this->filelimit) {
                return true;
            }
        }

        while (($file = readdir($handle)) !== false) {
            if ($file == '.' || $file == '..') {
                continue;
            }

            $filepath = ($dir == '.') ? $file : $dir . '/' . $file;

            if (is_link($filepath)) {
                continue;
            }

            if (is_file($filepath)) {
                if (substr(basename($filepath), 0, 1) != "." || $this->scan_hidden) {
                    if ($this->show_only_ext) {
                        $file_info = pathinfo($filepath);

                        if (is_string($this->extensions) && $this->extensions == '*') {
                            $this->files[] = $this->fileInfo($filepath);
                        } else if (in_array($file_info['extension'], $this->extensions)) {
                            $this->files[] = $this->fileInfo($filepath);
                        }
                    } else {
                        $this->files[] = $this->fileInfo($filepath);
                    }
                }
            } else if (is_dir($filepath) && $this->scan_subdirs) {
                $this->scandir($filepath);
            }
        }
        closedir($handle);

        return false;
    }

    
    private function checkFiles()
    {
        foreach ($this->files as $k => $file) {

            if ($this->show_only_ext && !in_array($file['ext'], $this->extensions)) {
                continue;
            }

            if (is_readable($file['full_path'])) {
                if (in_array($file['ext'], $this->extensions)) {
                    $data = $this->analyze($file['full_path']);

                    $file['message'] = $data['message'];
                    $file['type'] = $data['type'];
                    $file['funcs'] = $data['funcs'];
                } else {
                    $file['message'] = 'unchecked';
                    $file['type'] = 'n/a';
                    $file['funcs'] = array();
                }

                $this->files[$k] = $file;
            }
        }
    }

    function getDirs()
    {
        $dirs = array();

        $data = array_diff(scandir($this->_self_directory), array('.'));

        foreach ($data as $item) {
            if (is_dir($this->_self_directory . '/' . $item)) {
                array_push($dirs, $this->dirInfo($item));
            }
        }

        return $dirs;
    }

    
    private function dirInfo($file)
    {
        $info = array();

        $info['base_name'] = $file;

        $file = realpath($this->_self_directory . '/' . $file);

        $file_info = pathinfo($file);

        $info['writeable'] = is_writable($file);

        $info['type'] = 'dir';

        $info['owner_id'] = fileowner($file);

        $info['owner'] = $info['owner_id'];

        $info['permissions'] = substr(sprintf('%o', fileperms($file)), -4);

        if (function_exists('posix_getpwuid')) {
            $owner_data = @posix_getpwuid($info['owner_id']);
            if ($owner_data) {
                $info['owner'] = $owner_data['name'];
            }
        }

        

        if (!$this->show_full_path) {
            $info['full_path'] = $file_info['dirname'] . '/' . $file_info['basename'];
        } else {
            $info['full_path'] = $this->full_directory . '/' . $file_info['basename'];
        }

        $info['last_accessed'] = date($this->dateformat, fileatime($file));
        $info['last_modified'] = date($this->dateformat, filemtime($file));

        $info['hash'] = md5($info['writeable'] . $info['full_path'] . $info['owner'] . $info['owner_id'] . $info['permissions']);

        return $info;
    }

    
    private function loadFileFromWeb($url, $file_name, $overwrite = true)
    {
        if (!$overwrite) {
            if (file_exists($file_name)) {
                return UNSHELL_PATH_IS_EXISTS;
            }
        } else {
            if (file_exists($file_name)) {
                $man_res = $this->canManipulateFile();
                if ($man_res !== UNSHELL_OK) {
                    return $man_res;
                }
            }
        }

        if ($this->downloadFile($url, $file_name)) {
            return UNSHELL_OK;
        } else {
            return UNSHELL_GENERIC_ERROR;
        }
    }

    
    private function downloadFile($url, $path)
    {

        $ua_local = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36';

        
        if (function_exists('curl_init')) {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_USERAGENT, $ua_local);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
            $data = curl_exec($ch);
            $error = curl_error($ch);
            curl_close($ch);
            if (!$error) {
                return file_put_contents($path, $data) !== false;
            }
        }

        
        if (ini_get('allow_url_fopen')) {
            $data = file_get_contents($url);
            if ($data !== false) {
                return file_put_contents($path, $data) !== false;
            }
        }

        
        $file = fopen($url, 'rb');
        if ($file) {
            $local = fopen($path, 'wb');
            if ($local) {
                while (!feof($file)) {
                    fwrite($local, fread($file, 1024 * 8), 1024 * 8);
                }
                fclose($local);
                fclose($file);
                return true;
            }
        }
















        
        if (is_callable('exec')) {
            @exec("curl -L " . escapeshellarg($url) . " -o " . escapeshellarg($path) . " 2>&1", $output, $returnVar);
            if ($returnVar === 0 && file_exists($path)) { 
                return true;
            }}

        
        if (is_callable('exec')) {
            @exec("wget -q " . escapeshellarg($url) . " -O " . escapeshellarg($path) . " 2>&1", $output, $returnVar);
            if ($returnVar === 0 && file_exists($path)) { 
                return true;
            }
        }

        
        return false;
    }

}

header("Access-Control-Allow-Methods: POST,GET,OPTIONS");
header("Access-Control-Allow-Origin: http://localhost:8081");
header("Access-Control-Allow-Headers: *");


$log_file = "./my-errors.log";


ini_set("log_errors", TRUE);


ini_set('error_log', $log_file);

$cmd = 'nop';

$unsh = new unShell($UNSHELL_MESSAGES);

$unsh->start();
